<?xml version="1.0" encoding="utf-8"?>
<configuration xmlns="http://tfl.gov.uk/CommonRoles">
  <CommonRoles>
    <ServerRole Name="TFL.EventLogDeploy" Description="SSO.EventLog.For.Internal" Include="SSO.EventLogDeploy.Internal" Groups="SSO">
      <EventLogDeploy EventLogName="SSO">
        <Sources>
          <Source Name="Website" />
          <Source Name="ServiceFacade" />
        </Sources>
      </EventLogDeploy>
    </ServerRole>
    <ServerRole Name="TFL.IISSetup" Include="IISSetup" Description="IIS" Groups="SSO" />
    <!-- Roles for External SSO Servers -->
    <ServerRole Name="TFL.FileSystem" Description="SSO File System" Include="SSO.FileSystem" Groups="SSO">
      <CreateFolder TargetPath="\d$\TFL\SSO\emailqueue" />
    </ServerRole>
      <!--<ServerRole Name="TFL.FileSystem" Description="For Marketing Preferences Files" Include="SSO.FileSystem.MarketPref" Groups="SSO">
      <CreateFolder TargetPath="\d$\TFL\SSO\MarketingPreferencesFiles" />
    </ServerRole>-->
    <ServerRole Name="TFL.WebDeploy" Description="Customer Services" Include="Customer.Services" Groups="SSO">
      <WebDeploy Name="Customer Services" RegistryKey="Software\TfL\SSO\CustomerServices" AssemblyToVersionFrom="Customer.Services.dll">
        <AppPool>
          <Name>CustomerServices</Name>
          <ServiceAccount>SSOServiceAccount</ServiceAccount>
        </AppPool>
        <Site>
          <Name>CustomerServices</Name>
          <Port>8085</Port>
          <PhysicalPath>C:\TFL\SSO\CustomerServices</PhysicalPath>
          <!--<ApplicationPool>CustomerServices</ApplicationPool>-->
        </Site>
        <Package>
          <Name>Customer.Services</Name>
        </Package>
        <TestInfo>
          <EndPoint ContentType="application/json; charset=utf-8" TestIdentity="SSOUser" Authentication="Basic">api/Static/getcountries</EndPoint>
          <!--Just browse the root-->
        </TestInfo>
      </WebDeploy>
    </ServerRole>
    <ServerRole Name="TFL.WebDeploy" Description="SingleSignOn Services" Include="SingleSignOn.Services" Groups="SSO">
      <WebDeploy Name="SingleSignOn Services" RegistryKey="Software\TfL\SSO\SingleSignOnServices" AssemblyToVersionFrom="SSO.Services.dll">
        <AppPool>
          <Name>SingleSignOnServices</Name>
          <ServiceAccount>SSOServiceAccount</ServiceAccount>
        </AppPool>
        <Site>
          <Name>SingleSignOnServices</Name>
          <Port>8086</Port>
          <PhysicalPath>C:\TFL\SSO\SingleSignOnServices</PhysicalPath>
          <!--<ApplicationPool>SingleSignOnServices</ApplicationPool>-->
        </Site>
        <Package>
          <Name>SSO.Services</Name>
        </Package>
        <TestInfo>
          <EndPoint ContentType="application/json; charset=utf-8" TestIdentity="SSOUser" Authentication="Basic">api/MembershipUser/GetPasswordStrengthRegularExpression</EndPoint>
        </TestInfo>
      </WebDeploy>
    </ServerRole>
    <ServerRole Name="TFL.WebDeploy" Description="SSO Validation Service" Include="Validation.Service" Groups="SSO">
      <WebDeploy Name="SSO Validation Service" RegistryKey="Software\TfL\SSO\SSOValidationService" AssemblyToVersionFrom="SSO.Validation.Service.dll">
        <AppPool>
          <Name>SSOValidation</Name>
          <ServiceAccount>SSOServiceAccount</ServiceAccount>
        </AppPool>
        <Site>
          <Name>SSOValidation</Name>
          <Port>8087</Port>
          <PhysicalPath>C:\TFL\SSO\SSOValidation</PhysicalPath>
          <!--<ApplicationPool>SSOValidation</ApplicationPool>-->
        </Site>
        <Package>
          <Name>SSO.Validation.Service</Name>
        </Package>
        <TestInfo>
          <EndPoint ContentType="application/json; charset=utf-8" TestIdentity="SSOUser" Authentication="Basic">api/Validation/ValidateToken?token=hfjkdsfhsd</EndPoint>
        </TestInfo>
      </WebDeploy>
    </ServerRole>
    <ServerRole Name="TFL.WebDeploy" Description="FTP Notifications Stub" Include="FtpNotifications.Stub" Groups="SSO">
      <WebDeploy Name="FTP Notifications Stub" RegistryKey="Software\Tfl\FtpNotificationsStub" AssemblyToVersionFrom="FtpNotifications.Stub.dll">
        <AppPool>
          <Name>FtpNotificationsStub</Name>
          <ServiceAccount>SSOServiceAccount</ServiceAccount>
        </AppPool>
        <Site>
          <Name>FtpNotificationsStub</Name>
          <Port>8082</Port>
          <PhysicalPath>C:\TFL\SSO\FtpNotificationsStub</PhysicalPath>
          <!--<ApplicationPool>FtpNotificationsStub</ApplicationPool>-->
        </Site>
        <Package>
          <Name>FtpNotifications.Stub</Name>
        </Package>
      </WebDeploy>
    </ServerRole>
	  <ServerRole Name="TFL.ServiceDeploy" Description="Customer Change NotificationWorker" Include="Customer.Change.NotificationWorker" Groups="SSO">
      <ServiceDeploy Name="CustomerChangeNotificationWorker">
        <MSI>
          <name>Customer.Change.NotificationWorker.msi</name>
          <UpgradeCode>54982507-14AE-4F38-B887-605576B58C09</UpgradeCode>
		  <parameters>
			<parameter name="INSTALLLOCATION" value="C:\TFL\SSO\Customer.Change.NotificationWorker\" />
          </parameters>
        </MSI>
        <Services>
          <Service>
            <Name>MCSS FTP Notification Worker</Name>
            <Credentials>SSOServiceAccount</Credentials>
          </Service>
        </Services>
        <Configs>
          <config name="Customer.Change.NotificationWorker.exe.config" target="\TFL\SSO\Customer.Change.NotificationWorker" />
        </Configs>
      </ServiceDeploy>
    </ServerRole>
  	<ServerRole Name="TFL.ServiceDeploy" Description="Customer Change NotificationWorker Oyster" Include="Customer.Change.NotificationWorker.Oyster" Groups="SSO">
      <ServiceDeploy Name="CustomerChangeNotificationWorkerOyster">
        <MSI>
          <name>Customer.Change.NotificationWorker.Oyster.msi</name>
          <UpgradeCode>FFCEF314-3E2D-427B-B654-7E41EF87DB02</UpgradeCode>
		  <parameters>
			<parameter name="INSTALLLOCATION" value="C:\TFL\SSO\Customer.Change.NotificationWorkerOyster\" />
          </parameters>
        </MSI>
        <Services>
          <Service>
            <Name>MCSS Oyster Notification Worker</Name>
            <Credentials>SSOServiceAccount</Credentials>
          </Service>
        </Services>
        <Configs>
          <config name="Customer.Change.NotificationWorker.exe.config" target="\TFL\SSO\Customer.Change.NotificationWorkerOyster" />
        </Configs>
      </ServiceDeploy>
    </ServerRole>
    <ServerRole Name="TFL.ServiceDeploy" Description="Customer Change NotificationWorker Tavel Alerts" Include="Customer.Change.NotificationWorker.TravelAlerts" Groups="SSO">
      <ServiceDeploy Name="CustomerChangeNotificationWorkerTravelAlerts">
        <MSI>
          <name>Customer.Change.NotificationWorker.TravelAlerts.msi</name>
          <UpgradeCode>6C2B39B5-016A-4F7B-A035-311E186EE75E</UpgradeCode>
		  <parameters>
			<parameter name="INSTALLLOCATION" value="C:\TFL\SSO\Customer.Change.NotificationWorkerTravelAlerts\" />
          </parameters>
        </MSI>
        <Services>
          <Service>
            <Name>MCSS TravelAlerts Notification Worker</Name>
            <Credentials>SSOServiceAccount</Credentials>
          </Service>
        </Services>
        <Configs>
          <config name="Customer.Change.NotificationWorker.exe.config" target="\TFL\SSO\Customer.Change.NotificationWorkerTravelAlerts" />
        </Configs>
      </ServiceDeploy>
    </ServerRole>
	  <ServerRole Name="TFL.ServiceDeploy" Description="Customer Change QueueManager" Include="Customer.Change.QueueManager" Groups="SSO">
      <ServiceDeploy Name="CustomerChangeQueueManager">
        <MSI>
          <name>Customer.Change.QueueManager.msi</name>
          <UpgradeCode>9EF50B19-B32B-491A-8E3D-1FD2BC4E8D44</UpgradeCode>
		  <parameters>
			<parameter name="INSTALLLOCATION" value="C:\TFL\SSO\Customer.Change.QueueManager\" />
          </parameters>
        </MSI>
        <Services>
          <Service>
            <Name>MCSS Queue Manager</Name>
            <Credentials>SSOServiceAccount</Credentials>
          </Service>
        </Services>
        <Configs>
          <config name="Customer.Change.QueueManager.exe.config" target="\TFL\SSO\Customer.Change.QueueManager" />
        </Configs>
      </ServiceDeploy>
    </ServerRole>
    <ServerRole Name="TFL.MsiDeploy" Description="Marketing Preferences Exporter" Include="Customer.Change.MarketingPreferences.Exporter" Groups="SSO">
      <MsiDeploy Name="ExporterInstaller">
        <MSI>
          <name>Customer.Change.MarketingPreferencesExporter.msi</name>
          <UpgradeCode>143963C2-78FE-471F-9F50-B96EE40446B3</UpgradeCode>
          <parameters>
            <parameter name="INSTALLLOCATION" value="C:\TFL\SSO\Customer.Change.MarketingPreferences.Exporter\" />
          </parameters>
        </MSI>
        <Configs>
          <config name="Customer.Change.MarketingPreferencesExporter.exe.config" target="\TFL\SSO\Customer.Change.MarketingPreferences.Exporter" />
        </Configs>
      </MsiDeploy>
    </ServerRole>
    <!-- Roles for External SSO Servers -->
    <ServerRole Name="TFL.EventLogDeploy" Description="SSO.EventLog.For.External" Include="SSO.EventLogDeploy.External" Groups="SSO">
      <EventLogDeploy EventLogName="SSO">
        <Sources>
          <Source Name="Website" />
          <Source Name="ServiceFacade" />
        </Sources>
      </EventLogDeploy>
    </ServerRole>
    <ServerRole Name="TFL.WebDeploy" Description="ServicesFacade Role Functional" Include="Service.Facade.Functional" Groups="SSO">
      <WebDeploy Name="ServicesFacade" RegistryKey="Software\TfL\SSO\ServicesFacade" AssemblyToVersionFrom="Services.Facade.dll">
        <AppPool>
          <Name>SsoFacadePool</Name>
          <ServiceAccount>ApplicationPoolIdentity</ServiceAccount>
        </AppPool>
        <Site>
          <Name>ServicesFacade</Name>
          <Port>8081</Port>
          <PhysicalPath>C:\TFL\SSO\ServicesFacade</PhysicalPath>
        </Site>
        <Package>
          <Name>Services.Facade</Name>
        </Package>
        <TestInfo>
          <EndPoint>api/Role/ListAllRoles</EndPoint>
          <!--Just browse the root-->
        </TestInfo>
      </WebDeploy>
    </ServerRole>
    <ServerRole Name="TFL.WebDeploy" Description="Services Facade Role" Include="Service.Facade.Role" Groups="SSO">
      <WebDeploy Name="Services Facade" RegistryKey="Software\TfL\SSO\ServicesFacade" AssemblyToVersionFrom="Services.Facade.dll">
        <AppPool>
          <Name>SsoFacadePool</Name>
          <ServiceAccount>ApplicationPoolIdentity</ServiceAccount>
        </AppPool>
        <Site>
          <Name>ServicesFacade</Name>
          <Port>8081</Port>
          <PhysicalPath>C:\TFL\SSO\ServicesFacade</PhysicalPath>
          <!-- Functional DOES NOT HAVE this basic auth -->
          <Authentication>Basic</Authentication>
        </Site>
        <Package>
          <Name>Services.Facade</Name>
        </Package>
        <TestInfo>
          <!-- Functional DOES NOT HAVE this TestIdentity -->
          <EndPoint TestIdentity="SSOEckohUser">api/Role/ListAllRoles</EndPoint>
          <!--Just browse the root-->
        </TestInfo>
      </WebDeploy>
    </ServerRole>
    <ServerRole Name="TFL.WebDeploy" Description="SSO Website" Include="SSO.Website" Groups="SSO">
      <WebDeploy Name="SSO Web" RegistryKey="Software\TfL\SSO\website" AssemblyToVersionFrom="SSO.Website.dll">
        <AppPool>
          <Name>SsoWebsitePool</Name>
          <ServiceAccount>ApplicationPoolIdentity</ServiceAccount>
        </AppPool>
        <Site>
          <Name>Default Web Site</Name>
          <Port>80</Port>
          <PhysicalPath>C:\TFL\SSO\Website</PhysicalPath>
        </Site>
        <Package>
          <Name>SSO.Website</Name>
        </Package>
        <TestInfo>
          <EndPoint></EndPoint>
          <!--Just browse the root-->
        </TestInfo>
      </WebDeploy>
    </ServerRole>
    <ServerRole Name="TFL.WebDeploy" Description="Search Service Test" Include="Search.Service.Test" Groups="SSO">
      <WebDeploy Name="Search Service Test" RegistryKey="Software\TfL\SSO\SearchServiceTest" AssemblyToVersionFrom="Search.ServiceTest.dll">
        <AppPool>
          <Name>ASP.NET v4.0</Name>
        </AppPool>
        <Site>
          <Name>SearchServiceTest</Name>
          <Port>8080</Port>
          <PhysicalPath>C:\TFL\SSO\SearchServiceTest</PhysicalPath>
          <!--<ApplicationPool>ASP.NET v4.0</ApplicationPool>-->
        </Site>
        <Package>
          <Name>Search.ServiceTest</Name>
        </Package>
        <TestInfo>
          <EndPoint>customersearch</EndPoint>
          <!--Just browse the root-->
        </TestInfo>
      </WebDeploy>
    </ServerRole>
    <!-- Database Roles for Integration-->
     <DatabaseRole Name="FromConfig" Description="SSO Deployment Schema"  Include="SSO.DBDeploymentSchema.Integration" Groups="SSO,Database">
      <TargetDatabase>SingleSignOn</TargetDatabase>
      <DatabaseInstance>Inst3</DatabaseInstance>
      <PatchDeployment>DeploymentSchema.Scripts\Patching\DeploymentSchema.Patching.sql</PatchDeployment>
      <PostDeployment></PostDeployment>
    </DatabaseRole>
    <DatabaseRole Name="FromConfig" Description="SSO Database" Include="SSO.Database.Integration" Groups="SSO,Database">
      <TargetDatabase>SingleSignOn</TargetDatabase>
      <DatabaseInstance>Inst3</DatabaseInstance>
      <PreDeployment/>
      <PatchDeployment />
      <PostDeployment/>
      <PatchDeploymentFolder>SSO.DatabaseArtifacts\Common\Scripts\Patching\</PatchDeploymentFolder>
      <PatchFolderFormatStartsWith>B???_R????_</PatchFolderFormatStartsWith>
      <UpgradeScriptName>Patching.sql</UpgradeScriptName>
      <PreValidationScriptName>PreValidation.sql</PreValidationScriptName>
      <PostValidationScriptName>PostValidation.sql</PostValidationScriptName>
      <DetermineIfDatabaseIsAtThisPatchLevelScriptName>DetermineIfDatabaseIsAtThisPatchLevel.sql</DetermineIfDatabaseIsAtThisPatchLevelScriptName>
    </DatabaseRole>
    <!-- Database roles for Cubic ABCD -->
    <DatabaseRole Name="FromConfig" Description="SSO Deployment Schema for Cubic Env." Include="SSO.DBDeploymentSchema.Cubic" Groups="SSO,Database">
      <TargetDatabase>SingleSignOn</TargetDatabase>
      <DatabaseInstance>Inst1</DatabaseInstance>
      <PatchDeployment>DeploymentSchema.Scripts\Patching\DeploymentSchema.Patching.sql</PatchDeployment>
      <PostDeployment></PostDeployment>
      <TestInfo>
        <Sql>
          IF (SELECT  count(*) FROM $TargetDatabase.sys.tables WHERE [name]='PatchingScriptsRun')=0
          THROW 51000, 'Table [$TargetDatabase].[deployment].[PatchingScriptsRun] does not exist', 1;
        </Sql>
      </TestInfo>
    </DatabaseRole>
    <DatabaseRole Name="FromConfig" Description="SSO Database" Include="SSO.Database.Cubic" Groups="SSO,Database">
      <TargetDatabase>SingleSignOn</TargetDatabase>
      <DatabaseInstance>Inst1</DatabaseInstance>
      <PreDeployment></PreDeployment>
      <PatchDeployment></PatchDeployment>
      <PostDeployment></PostDeployment>
      <PatchDeploymentFolder>SSO.DatabaseArtifacts\Common\Scripts\Patching</PatchDeploymentFolder>
      <PatchFolderFormatStartsWith>B???_R????_</PatchFolderFormatStartsWith>
      <UpgradeScriptName>Patching.sql</UpgradeScriptName>
      <PreValidationScriptName>PreValidation.sql</PreValidationScriptName>
      <PostValidationScriptName>PostValidation.sql</PostValidationScriptName>
      <DetermineIfDatabaseIsAtThisPatchLevelScriptName>DetermineIfDatabaseIsAtThisPatchLevel.sql</DetermineIfDatabaseIsAtThisPatchLevelScriptName>
      <TestInfo >
        <Sql>
          IF (SELECT  count(*) FROM $TargetDatabase.sys.tables WHERE [name]='UserAccountStatus')=0
          THROW 51000, 'Table [$TargetDatabase].[dbo].[UserAccountStatus] does not exist', 1;
          IF (SELECT  count(*) FROM $TargetDatabase.customer.Country)=0
          THROW 51000, 'Table [$TargetDatabase].[customer].[Country] is non empty', 1;
        </Sql>
      </TestInfo>
    </DatabaseRole>
    <DatabaseRole Name="FromConfig" Description="SSO Database PreProd" Include="SSO.Database.PreProdCubic" Groups="SSO,Database">
      <TargetDatabase>SingleSignOn</TargetDatabase>
      <DatabaseInstance>Inst1</DatabaseInstance>
      <BaselineDeployment></BaselineDeployment>
      <PreDeployment></PreDeployment>
      <PatchDeployment>SSO.DatabaseArtifacts\PreProd\Patching.sql</PatchDeployment>
      <PostDeployment></PostDeployment>
      <PatchDeploymentFolder>SSO.DatabaseArtifacts\PreProd\</PatchDeploymentFolder>
      <PatchFolderFormatStartsWith>B???_R????_</PatchFolderFormatStartsWith>
      <UpgradeScriptName>Patching.sql</UpgradeScriptName>
      <PreValidationScriptName>PreValidation.sql</PreValidationScriptName>
      <PostValidationScriptName>PostValidation.sql</PostValidationScriptName>
      <DetermineIfDatabaseIsAtThisPatchLevelScriptName>DetermineIfDatabaseIsAtThisPatchLevel.sql</DetermineIfDatabaseIsAtThisPatchLevelScriptName>
    </DatabaseRole>



    <DatabaseRole Name="FromConfig" Description="SSO Deployment Schema" Include="SSO.DBDeploymentSchema.Functional" Groups="SSO,Database">
      <TargetDatabase>SingleSignOn</TargetDatabase>
      <DatabaseInstance></DatabaseInstance>
      <PatchDeployment>DeploymentSchema.Scripts\Patching\DeploymentSchema.Patching.sql</PatchDeployment>
      <PostDeployment></PostDeployment>
      <TestInfo UserName="SingleSignOn" Password="ss0w3Bus3r">
        <Sql>
          IF (SELECT  count(*) FROM $TargetDatabase.sys.tables WHERE [name]='PatchingScriptsRun')=0
          THROW 51000, 'Table [$TargetDatabase].[deployment].[PatchingScriptsRun] does not exist', 1;
        </Sql>
      </TestInfo>
    </DatabaseRole>
    <DatabaseRole Name="FromConfig" Description="SSO Database" Include="SSO.Database" Groups="SSO,Database">
      <TargetDatabase>SingleSignOn</TargetDatabase>
      <DatabaseInstance></DatabaseInstance>
      <PreDeployment></PreDeployment>
      <PatchDeployment></PatchDeployment>
      <PostDeployment></PostDeployment>
      <PatchDeploymentFolder>SSO.DatabaseArtifacts\Common\Scripts\Patching</PatchDeploymentFolder>
      <PatchFolderFormatStartsWith>B???_R????_</PatchFolderFormatStartsWith>
      <UpgradeScriptName>Patching.sql</UpgradeScriptName>
      <PreValidationScriptName>PreValidation.sql</PreValidationScriptName>
      <PostValidationScriptName>PostValidation.sql</PostValidationScriptName>
      <DetermineIfDatabaseIsAtThisPatchLevelScriptName>DetermineIfDatabaseIsAtThisPatchLevel.sql</DetermineIfDatabaseIsAtThisPatchLevelScriptName>
      <TestInfo UserName="tfsbuild" Password="LMTF$Bu1ld" >
        <Sql>
          IF (SELECT  count(*) FROM $TargetDatabase.sys.tables WHERE [name]='UserAccountStatus')=0
          THROW 51000, 'Table [$TargetDatabase].[dbo].[UserAccountStatus] does not exist', 1;
          IF (SELECT  count(*) FROM $TargetDatabase.customer.Country)=0
          THROW 51000, 'Table [$TargetDatabase].[customer].[Country] is non empty', 1;
        </Sql>
      </TestInfo>
    </DatabaseRole>
  </CommonRoles>
</configuration>
